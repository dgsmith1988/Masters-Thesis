classdef Note
    %NOTE Simple class to hold syntehsized note sounds to help organize
    %code
    
    properties
        rhythmicDuration    %quarter note = 1, eigth-note = 1/2
        fret
        slideInFlag
        vibratoFlag
        %Derived properties
        duration_sec
    end
    
    properties (Constant)
        BPM = 80
        slideRhythmicDuration = 1/4
        slideDuration_sec = Note.calucalateDuration(Note.slideRhythmicDuration, Note.BPM)
    end
    
    methods
        function obj = Note(rhythmicDuration, fret, slideInFlag, vibratoFlag)
            obj.rhythmicDuration = rhythmicDuration;
            obj.fret = fret;
            obj.slideInFlag = slideInFlag;
            obj.vibratoFlag = vibratoFlag;
            obj.duration_sec = calucalateDuration(obj.rhythmicDuration, obj.BPM);
        end
        
        function L = generateLCurve(obj, Fs_ctrl)
            L = [];
            soundDuration_sec = obj.duration_sec;
            
            if obj.slideInFlag
                L = generateLCurve(obj.fret-.25, obj.fret, obj.slideDuration_sec, Fs_ctrl);
                soundDuration_sec = soundDuration_sec - obj.slideDuration_sec;
            end
            
            %Concatentate a a straight or vibrato signal depdning on the
            %flag
            if obj.vibratoFlag
                centerFret = obj.fret;
                vibratoWidth = .5;
                wideVibratoFreq = 2;
                narrowVibratoWidth = .125;
                narrowVibratoFreq = 5;
                %All the vibrato terms are in frets which are then mapped to the relative
                %string length
                t = (0:Fs_ctrl*soundDuration_sec-1)/Fs_ctrl;
                fretTrajectory = wideVibratoWidth*sin(2*pi*wideVibratoFreq*t) + centerFret;
                L = [L, generateLCurve(obj.fret, obj.fret, soundDuration_sec, Fs_ctrl)];
            else
                %Single note pluck with no-sliding whatsoever
                L = [L, obj.fret*ones(1, soundDuration_sec*Fs_ctrl)];
            end
        end
    end
    
    methods(Static)
        function duration_sec = calucalateDuration(rhythmicDuration, BPM)
            duration_sec = rhythmicDuration / BPM * 60;
        end
    end
end

