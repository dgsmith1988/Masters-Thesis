%Attempet to emulate the single string slide lick which was recorded

clear;
close all;
dbstop if error

%Synthsizer and sound parameters
slideSynthParams = SlideSynthParams();
slideSynthParams.enableCSG = false;
slideSynthParams.CSG_noiseSource = "NoisePulseTrain";
slideSynthParams.CSG_harmonicAccentuator = "ResoTanh";
slideSynthParams.stringNoiseSource = "Pink";
slideSynthParams.useNoiseFile = false;
slideSynthParams.slideType = "Brass";
slideSynthParams.stringName = "A";
Fs_audio = SystemParams.audioRate;
Fs_ctrl = SystemParams.controlRate;

%Specify the notes and their 

slideLick = ...
{   Note(.5, 0, false, false), ...
    Note(1, 6, false, false), ...
    Note(1, 5, false, false), ...
    Note(.5, 3, false, false), ...
    Note(.5, 0, false, false), ...
    Note(4, 3, false, false), ...
    };

numNotes = length(slideLick);

lickDuration_sec = 0;
for k = 1:numNotes
    lickDuration_sec = lickDuration_sec + slideLick{k}.calculateNoteDuration(BPM);
end

numSamples_audio = lickDuration_sec * Fs_audio;

%Spectrogram analysis parameters
windowLength = 12*10^-3*Fs_audio; %12 ms window
window = hamming(windowLength);
overlap = .75*windowLength;
N = 4096;
y_upperLim_kHz = Fs_audio/2000;

%Synthesize the sounds and stitch them together
y12 = zeros(1, numSamples_audio);
i1 = 1;
for k  = 1:numNotes
    fprintf("Synthesizing note %i/%i\n", k, numNotes);
    L = generateLCurve(frets(k), frets(k), noteDurations_sec(k), Fs_ctrl);
    i2 = i1 + noteDurations_sec(k)*Fs_audio - 1;
    y12(i1:i2) = synthesizeSinglePluck(slideSynthParams, L, noteDurations_sec(k));
    i1 = i2 + 1;
end

%Plot the results as well as the spectrogram
figure;
plot(0:numSamples_audio-1, y12);
title("y[n]");
xlabel("n");
ylabel("Amplitude");

figure;
spectrogram(y12, window, overlap, N, Fs_audio, "yaxis");  
ylim([0 y_upperLim_kHz]);
title("Slide Lick Emulation");