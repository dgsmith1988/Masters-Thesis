close all;
clear;

%Generaly system parameters
Fs = SystemParams.controlRate;
stringLength = SystemParams.stringLengthMeters;
n_w = SystemParams.E_string_params.n_w;
duration_sec = .6;
numSamples = Fs*duration_sec;

%Equation generated by fitting a parabola to the spectrogram from the CMJ
%paper, see that as well as the Desmos calculations
a = 1/.09;
increment = .6/numSamples;
x = 0:increment:.6-increment;
slideSpeed = (1000/n_w)*(-a*(x -.3).^2 + 1);

%generate the control signal based on the derivations in your notebook
L = zeros(1, numSamples);
L(1) = 1;
for n = 2:numSamples
    L(n) = L(n-1) - slideSpeed(n)/(stringLength*Fs);
end

%Processing objects
slideSpeedExtractor = SlideSpeedExtractor(L(1));

slideSpeed_calc = zeros(1, numSamples);
%Processing loop
for n = 1:numSamples
    slideSpeed_calc(n) = slideSpeedExtractor.tick(L(n));
end
err = slideSpeed_calc - slideSpeed;

figure;
subplot(2, 1, 1);
plot(slideSpeed, "k", 'DisplayName', 'Slide Speed - Theoretical');
hold on;
plot(slideSpeed_calc, "--r", 'DisplayName', 'Slide Speed - Measured');
plot(err, "b", 'DisplayName', 'Error');
hold off;
legend("Location", "south");
title('Slide Speed Comparison');
xlabel("Time-index (n)");
ylabel("meters/sec")

subplot(2, 1, 2);
plot(L, 'DisplayName', 'L[n]');
% legend();
% title('L[n]');
xlabel("Time-index (n)");
ylabel("L[n]");