%Seeing how this interacts with the revamped ControlSignalProcessor
close all;
clear;

%System parameters
Fs = SystemParams.audioRate;
stringLength = SystemParams.stringLengthMeters;
stringParams = SystemParams.E_string_params;
f0 = stringParams.f0;
pulseLength_ms = stringParams.pulseLength;
decayRate = stringParams.decayRate;
n_w = stringParams.n_w;
duration_sec = .6;
numSamples = round(Fs*duration_sec);


%Equation generated by fitting a parabola to the spectrogram from the CMJ
%paper, see that as well as the Desmos calculations
a = 1/.09;
increment = .6/numSamples;
x = 0:increment:.6-increment;
f_c = 1000*(-a*(x -.3).^2 + 1);

%generate the control signal based on the derivations in your notebook
L = zeros(1, numSamples);
L(1) = 1;
for n = 2:numSamples
    L(n) = L(n-1) - f_c(n)/(n_w*stringLength*Fs);
end

%buffers to be filled during processing loop
f_c = zeros(1, numSamples);
period_ms = zeros(1, numSamples);
y = zeros(1, numSamples);

%Redo these initial values based on the f_c[n] parameters
triggerPeriod_ms = f_c2period_ms(f_c(1));
period_samples = round(triggerPeriod_ms*10^-3*Fs);

%Processing objects
controlSignalProcessor = ControlSignalProcessor(n_w, L(1));
noisePulseTrain = NoisePulseTrain(triggerPeriod_ms, pulseLength_ms, decayRate);

f_c_calc = zeros(1, numSamples);
%Processing loop
for n = 1:numSamples
    f_c_calc(n) = controlSignalProcessor.tick(L(n));
    period_ms(n) = f_c2period_ms(f_c_calc(n));
    y(n) = noisePulseTrain.tick(period_ms(n));
end
err = f_c_calc - f_c;

subplot(3, 1, 1);
plot(y);
title("Noise Pulse Train Test");

subplot(3, 1, 2);
plot(f_c, 'DisplayName', 'f_c');
hold on;
plot(f_c_calc, 'DisplayName', 'f_c calc');
plot(err, 'DisplayName', 'err');
hold off;
legend();
title('f_c comparison');

subplot(3, 1, 3);
yyaxis left;
plot(L, 'DisplayName', 'L[n]');
hold on;
yyaxis right
plot(period_ms, 'DisplayName', 'period ms');
hold off;
legend();
title('L and period');